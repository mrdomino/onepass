name: Release

on:
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to crates.io'
        type: boolean
        default: false

jobs:
  build:
    uses: ./.github/workflows/build.yaml
    with:
      release: true
      publish: ${{ startsWith(github.ref, 'refs/tags/v') || inputs.publish }}

  publish:
    name: Publish to crates.io
    needs: build
    runs-on: ubuntu-latest
    environment: crates-io
    if: startsWith(github.ref, 'refs/tags/v') || inputs.publish
    steps:
    - uses: actions/checkout@v4
    - run: cargo publish --no-verify --locked
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  macos-release:
    name: macOS Release
    needs: build
    runs-on: macos-latest
    environment: macos
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: onepass-aarch64-apple-darwin
    - name: Install Apple certificate
      env:
        APPLICATION_CERT_B64: ${{ secrets.APPLICATION_CERT_B64 }}
        INSTALLER_CERT_B64: ${{ secrets.INSTALLER_CERT_B64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        APPLICATION_CERT_PATH=$RUNNER_TEMP/application.p12
        INSTALLER_CERT_PATH=$RUNNER_TEMP/installer.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        echo -n "$APPLICATION_CERT_B64" | base64 --decode -o "$APPLICATION_CERT_PATH"
        echo -n "$INSTALLER_CERT_B64" | base64 --decode -o "$INSTALLER_CERT_PATH"

        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

        security import "$APPLICATION_CERT_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
        security import "$INSTALLER_CERT_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k"$KEYCHAIN_PATH"
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security list-keychain -d user -s "$KEYCHAIN_PATH"

    - name: codesign app
      run: |
        codesign -s "Developer ID Application: Steven Dee (2TM4K8523U)" -f --timestamp -o runtime onepass
        chmod +x onepass

    - name: get version
      id: get-version
      run: |
        { echo -n version=
          ./onepass --version | cut -d' ' -f2
        } >> $GITHUB_OUTPUT

    - uses: actions/upload-artifact@v4
      with:
        name: onepass-signed-darwin
        path: onepass

    - name: notarize installer
      env:
        NOTARY_PASS: ${{ secrets.NOTARY_PASS }}
        DEV_ACCOUNT: ${{ secrets.DEV_ACCOUNT }}
      run: |
        xcrun notarytool store-credentials --apple-id "$DEV_ACCOUNT" --team-id 2TM4K8523U --password "$NOTARY_PASS" notary-onepass
        mkdir .root
        cp onepass .root
        pkgbuild --root .root \
                 --identifier org.wholezero.pkg.onepass \
                 --version "${{ steps.get-version.outputs.version }}" \
                 --install-location /usr/local/bin \
                 --sign "Developer ID Installer: Steven Dee (2TM4K8523U)" \
                 onepass.pkg
        xcrun notarytool submit onepass.pkg --keychain-profile notary-onepass --wait
        xcrun stapler staple onepass.pkg
        spctl --assess -vv --type install onepass.pkg

    - uses: actions/upload-artifact@v4
      with:
        name: onepass-pkg-darwin
        path: onepass.pkg

  github-release:
    name: Create GitHub Release
    needs: [build, macos-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || inputs.publish
    steps:
    - uses: actions/checkout@v4

    - name: Get version
      id: get-version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release files
      run: |
        mkdir release-files
        for dir in artifacts/onepass-*-*-*; do
          if [ -d "$dir" ]; then
            target=$(basename "$dir")
            cp "$dir/onepass" "release-files/$target"
          fi
        done
        if [ -f "artifacts/onepass-pkg-darwin/onepass.pkg" ]; then
          cp "artifacts/onepass-pkg-darwin/onepass.pkg" "release-files/"
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        draft: true
        tag_name: ${{ steps.get-version.outputs.version }}
        name: Release ${{ steps.get-version.outputs.version }}
        files: release-files/*
        generate_release_notes: true
