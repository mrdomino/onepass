name: Release

on:
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        type: string
        required: false
      publish:
        description: 'Publish to crates.io'
        type: boolean
        default: false
      create_github_release:
        description: 'Create GitHub release'
        type: boolean
        default: false

jobs:
  build:
    uses: ./.github/workflows/build.yaml
    with:
      release: true
      publish: ${{ startsWith(github.ref, 'refs/tags/v') || inputs.publish }}
      tag: ${{ inputs.tag }}

  publish:
    name: Publish to crates.io
    permissions:
      id-token: write
    needs: build
    runs-on: ubuntu-latest
    environment: crates-io
    if: startsWith(github.ref, 'refs/tags/v') || inputs.publish
    steps:
    - uses: actions/checkout@v5
      with:
        ref: ${{ inputs.tag || github.ref }}
    - uses: rust-lang/crates-io-auth-action@v1
      id: auth
    - run: cargo publish --no-verify --locked
      env:
        CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}

  macos-release:
    name: macOS Release
    needs: build
    runs-on: macos-latest
    environment: macos
    steps:
    - uses: actions/checkout@v5
      with:
        ref: ${{ inputs.tag || github.ref }}
    - uses: actions/download-artifact@v5
      with:
        name: onepass-aarch64-apple-darwin
    - name: Install Apple certificate
      env:
        APPLICATION_CERT_B64: ${{ secrets.APPLICATION_CERT_B64 }}
        INSTALLER_CERT_B64: ${{ secrets.INSTALLER_CERT_B64 }}
        BUILD_PROVISION_PROFILE_B64: ${{ secrets.BUILD_PROVISION_PROFILE_B64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        APPLICATION_CERT_PATH=$RUNNER_TEMP/application.p12
        INSTALLER_CERT_PATH=$RUNNER_TEMP/installer.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile

        echo -n "$APPLICATION_CERT_B64" | base64 --decode -o "$APPLICATION_CERT_PATH"
        echo -n "$INSTALLER_CERT_B64" | base64 --decode -o "$INSTALLER_CERT_PATH"
        echo -n "$BUILD_PROVISION_PROFILE_B64" | base64 --decode -o "$PP_PATH"

        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

        security import "$APPLICATION_CERT_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
        security import "$INSTALLER_CERT_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k"$KEYCHAIN_PATH"
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security list-keychain -d user -s "$KEYCHAIN_PATH"

        mkdir -p ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles
        cp "$PP_PATH" ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles

    - name: codesign app
      run: |
        mkdir .root
        mv onepass .root
        codesign \
            --sign "Developer ID Application: Steven Dee (2TM4K8523U)" \
            --force \
            --timestamp \
            --options runtime \
            --entitlements data/onepass.entitlements \
            .root/onepass
        chmod +x .root/onepass

    - uses: actions/upload-artifact@v5
      with:
        name: onepass-signed-darwin
        path: .root/onepass

    - name: check signature
      run: codesign -vvv --strict --deep .root/onepass

    - name: get version
      id: get-version
      run: |
        if [ -n "${{ inputs.tag }}" ]; then
          expected_version="${{ inputs.tag }}"
        else
          expected_version="${GITHUB_REF#refs/tags/}"
        fi

        # Remove 'v' prefix if present for comparison
        expected_clean="${expected_version#v}"

        echo "version=$expected_clean" >> $GITHUB_OUTPUT

    - name: notarize installer
      env:
        NOTARY_PASS: ${{ secrets.NOTARY_PASS }}
        DEV_ACCOUNT: ${{ secrets.DEV_ACCOUNT }}
      run: |
        set -xuo pipefail
        xcrun notarytool store-credentials \
            --apple-id "$DEV_ACCOUNT" \
            --team-id 2TM4K8523U \
            --password "$NOTARY_PASS" \
            notary-onepass
        pkgbuild --root .root \
                 --identifier org.wholezero.pkg.onepass \
                 --version "${{ steps.get-version.outputs.version }}" \
                 --install-location /usr/local/bin \
                 --sign "Developer ID Installer: Steven Dee (2TM4K8523U)" \
                 onepass.pkg
        codesign -vvv --deep --strict .root/onepass
        pkgutil --check-signature onepass.pkg
        xcrun notarytool submit \
            onepass.pkg \
            --keychain-profile notary-onepass \
            --wait
        xcrun stapler staple onepass.pkg
        spctl --assess -vv --type install onepass.pkg

    - uses: actions/upload-artifact@v5
      with:
        name: onepass-pkg-darwin
        path: onepass.pkg

  attestation:
    name: Create Attestation
    permissions:
      id-token: write
      contents: read
      attestations: write
    needs: [build, macos-release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v5
      with:
        path: artifacts
    - run: |
        mkdir attest
        ls -lR artifacts
        for path in artifacts/*; do
          mv "$path"/onepass* "attest/${path#artifacts/}"
        done
    - uses: actions/attest-build-provenance@v3
      with:
        subject-path: attest/*

  github-release:
    name: Create GitHub Release
    permissions:
      contents: write
    needs: [build, macos-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || inputs.create_github_release
    steps:
    - uses: actions/checkout@v5
      with:
        ref: ${{ inputs.tag || github.ref }}

    - name: Get version
      id: get-version
      run: |
        if [ -n "${{ inputs.tag }}" ]; then
          echo "version=${{ inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - uses: actions/download-artifact@v5
      with:
        path: artifacts

    - name: Prepare release files
      run: |
        mkdir release-files
        for dir in artifacts/onepass-*-*-*; do
          if [ -d "$dir" ]; then
            target=$(basename "$dir")
            cp "$dir/onepass"* "release-files/$target"
          fi
        done
        if [ -f artifacts/onepass-signed-darwin/onepass ]; then
          cp artifacts/onepass-signed-darwin/onepass release-files/onepass-aarch64-apple-darwin
        fi
        if [ -f artifacts/onepass-pkg-darwin/onepass.pkg ]; then
          cp artifacts/onepass-pkg-darwin/onepass.pkg release-files/onepass.pkg
        fi
        cp onepass.provisionprofile release-files/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        draft: true
        tag_name: ${{ steps.get-version.outputs.version }}
        name: Release ${{ steps.get-version.outputs.version }}
        files: release-files/*
        generate_release_notes: true
