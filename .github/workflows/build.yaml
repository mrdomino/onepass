name: Build

on:
  pull_request:
  push:
    branches: [main]
  workflow_call:
    inputs:
      release:
        default: false
        type: boolean
      publish:
        default: false
        type: boolean
      tag:
        description: 'Tag to build (e.g., v1.0.0)'
        type: string
        required: false

env:
  RUST_VERSION: 1.89

jobs:
  build:
    name: Build
    strategy:
      matrix:
        include:
          - os:   macos
            arch: aarch64
          - os:   ubuntu
            arch: aarch64
            runner: ubuntu-24.04-arm
          - os:   ubuntu
            arch: x86_64
          - os:   windows
            arch: aarch64
            runner: windows-11-arm
          - os:     windows
            arch:   x86_64
    runs-on: ${{ matrix.runner != '' && matrix.runner || format('{0}-latest', matrix.os)}}

    steps:
    - name: setup environment
      shell: bash
      run: |
        set -u
        osname() {
          case "${{ matrix.os }}" in
            macos)   echo apple-darwin      ;;
            ubuntu)  echo unknown-linux-gnu ;;
            windows) echo pc-windows-msvc   ;;
          esac
        }
        if [[ true = "${{ inputs.release }}" ]]; then
          profile=release
          outdir=release
          retention_days=90
        else
          profile=dev
          outdir=debug
          retention_days=7
        fi
        if [[ macos = "${{ matrix.os }}" && true = "${{ inputs.release }}" ]]; then
          features=' --no-default-features --features=macos-biometry'
        else
          features=
        fi
        if [[ windows = "${{ matrix.os }}" ]]; then
          suffix=.exe
        else
          suffix=
        fi
        cat >>$GITHUB_ENV <<EOF
        target=${{ matrix.arch }}-$(osname)
        outdir=$outdir
        profile=$profile
        retention_days=$retention_days
        features=$features
        suffix=$suffix
        EOF

    - name: install system dependencies
      run: |
        sudo sh -c 'apt-get update && apt-get install -yy --no-install-recommends \
            pkg-config \
            libdbus-1-dev \
            libssl-dev'
      if: ${{ matrix.os == 'ubuntu' }}

    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.tag || github.ref }}
    - run: rustup toolchain install ${{ env.RUST_VERSION }} --target ${{ env.target }} --profile minimal
      shell: bash
    - run: rustup default ${{ env.RUST_VERSION }}
    - uses: mrdomino/rust-cache@v2

    - run: cargo build --locked --profile ${{ env.profile }} --target ${{ env.target }}${{ env.features }}

    - uses: actions/upload-artifact@v4
      with:
        name: onepass-${{ env.target }}
        path: target/${{ env.target }}/${{ env.outdir }}/onepass${{ env.suffix }}
        retention-days: ${{ env.retention_days }}

    - run: cargo test --profile dev --target ${{ env.target }}
      if: ${{ !inputs.release }}

    - run: cargo publish --locked --dry-run --target ${{ env.target }}
      if: ${{ inputs.publish && matrix.os != 'windows' }}
